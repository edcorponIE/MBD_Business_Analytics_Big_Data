NormalizationCritics <- critics[,-1]
NormalizationCritics
for (row in 1:nrow(critics)) {
for (col in 1:ncol(critics)-1) {
NormalizationCritics[row,col] <- critics[row,col] - critics[row,]$Mean
}}
ncol(critics)
ncol(critics)-1
for (row in 1:nrow(critics)) {
for (col in 2:ncol(critics)-1) {
NormalizationCritics[row,col] <- critics[row,col] - critics[row,]$Mean
}}
NormalizationCritics
NormalizationCritics <- critics[,-1]
NormalizationCritics
criticsNoNames <- critics[,-1]
for (row in 1:nrow(criticsNoNames)) {
for (col in 1:ncol(criticsNoNames)-1) {
NormalizationCritics[row,col] <- criticsNoNames[row,col] - criticsNoNames[row,]$Mean
}}
criticsNoNames
criticsNoNames[1,]$Mean
criticsNoNames[1,1]
NormalizationCritics[1,1]
for (row in 1:nrow(criticsNoNames)) {
for (col in 1:ncol(criticsNoNames)-1) {
NormalizationCritics[row,col] <- criticsNoNames[row,col] - criticsNoNames[row,]$Mean
}}
ncol(criticsNoNames)
for (row in 1:nrow(criticsNoNames)) {
for (col in 1:ncol(criticsNoNames)) {
NormalizationCritics[row,col] <- criticsNoNames[row,col] - criticsNoNames[row,]$Mean
}}
NormalizationCritics
arrayMeans <- array(dim = nrow(critics))
arrayMeans
critics <- read.csv("C:/Users/Eduardo/Desktop/IE 2/Recommendation Engines/session 2/Data/critics.csv")
criticsNoNames <- critics[,-1]
critics$Mean <- NA
arrayMeans <- array(dim = nrow(critics))
for (row in 1:nrow(critics)) {
critics[row,]$Mean <- rowMeans(critics[row,-1], na.rm = T)
arrayMeans[row] <- rowMeans(critics[row,-1], na.rm = T)
}
arrayMeans
for (row in 1:nrow(criticsNoNames)) {
for (col in 1:ncol(criticsNoNames)) {
NormalizationCritics[row,col] <- criticsNoNames[row,col] - criticsNoNames[row,]$Mean
}}
critics
criticsNoNames <- critics[,-1]
NormalizationCritics <- critics[,-1]
for (row in 1:nrow(criticsNoNames)) {
for (col in 1:ncol(criticsNoNames)) {
NormalizationCritics[row,col] <- criticsNoNames[row,col] - criticsNoNames[row,]$Mean
}}
NormalizationCritics
NormalizationCritics$Mean
NormalizationCritics$Mean <- arrayMeans
NormalizationCritics$Mean
NormalizationCritics
critics <- read.csv("C:/Users/Eduardo/Desktop/IE 2/Recommendation Engines/session 2/Data/critics.csv")
top <- colMeans(critics[,-1], na.rm=TRUE)
top5 <- sort(top, decreasing=TRUE)[1:5]
top5
top5_quantity <- sort(colSums(critics[,-1] > 0, na.rm = TRUE),decreasing=T)[1:5]
top5_quantity
df_critics <- as.data.frame(critics)
Sophia_critics <- t(df_critics[df_critics$User=="Sophia",])
Nuria_critics <- t(df_critics[df_critics$User=="Nuria",])
correlation_Sophia_Nuria <- cor(as.numeric(Sophia_critics[-1,]),as.numeric(Nuria_critics[-1,]),us="complete.obs")
correlation_Sophia_Nuria
critics$Mean <- NA
arrayMeans <- array(dim = nrow(critics))
for (row in 1:nrow(critics)) {
critics[row,]$Mean <- rowMeans(critics[row,-1], na.rm = T)
arrayMeans[row] <- rowMeans(critics[row,-1], na.rm = T)
}
criticsNoNames <- critics[,-1]
NormalizationCritics <- critics[,-1]
for (row in 1:nrow(criticsNoNames)) {
for (col in 1:ncol(criticsNoNames)) {
NormalizationCritics[row,col] <- criticsNoNames[row,col] - criticsNoNames[row,]$Mean
}}
NormalizationCritics$Mean <- arrayMeans
NormalizationCritics_minusSophia <- NormalizationCritics[-15,-21]
NormalizationCritics_Sophia <- as.double(NormalizationCritics_Sophia)
Corr <- array(dim = length(NormalizationCritics)-2)
NormalizationCritics_Sophia <- NormalizationCritics[15,-21]
NormalizationCritics_Sophia <- as.double(NormalizationCritics_Sophia)
Corr <- array(dim = length(NormalizationCritics)-2)
absCorr <- array(dim = length(NormalizationCritics)-2)
sumCorr <- 0
for (row in 1:nrow(NormalizationCritics_minusSophia)){
correlation_Sophia <- cor(x = NormalizationCritics_Sophia, y = as.double(NormalizationCritics_minusSophia[row,]), use = "complete.obs")
print(correlation_Sophia)
Corr[row] <- correlation_Sophia
absCorr[row] <- abs(correlation_Sophia)
sumCorr <- sum(sumCorr,abs(correlation_Sophia))
}
NormalizationCriticsNoMean <- NormalizationCritics[-15,-21]
NormalizationCriticsCorr <- NormalizationCriticsNoMean
for (row in 1:nrow(NormalizationCriticsNoMean)) {
for (col in 1:ncol(NormalizationCriticsNoMean)) {
NormalizationCriticsCorr[row,col] <- NormalizationCriticsNoMean[row,col] * Corr[row]
}}
sumMovies <- array(dim = length(NormalizationCriticsCorr))
for (col in 1:ncol(NormalizationCriticsCorr)) {
sumMovies[col] <- sum(as.numeric(NormalizationCriticsCorr[,col]), na.rm = T)
}
sumMoviesCorr <- array(data = sumMovies/sumCorr)
arrayMeansSophia <- array(data = arrayMeans[15], dim = length(arrayMeans))
RecommentationSophia <- array(dim = length(sumMoviesCorr))
for (i in 1:length(sumMoviesCorr)) {
RecommentationSophia[i] <- sum(sumMoviesCorr[i], arrayMeans[15], na.rm = T)
}
df_critics <- as.data.frame(critics)
Sophia_critics <- t(df_critics[df_critics$User=="Sophia",])
Sophia_movies <- is.na(Sophia_critics[2:21,])
RecommendationSophiaNameRates <- data.frame("Movies" = colnames(df_critics[,2:21]), "Sophia's Recommendation" = RecommentationSophia, "Movies Sophia watched" = Sophia_movies)
RecommendationSophiaNameRates <- RecommendationSophiaNameRates[!(RecommendationSophiaNameRates$Movies.Sophia.watched=='FALSE'),]
RecommendationSophiaNameRates <- RecommendationSophiaNameRates[order(RecommendationSophiaNameRates$Sophia.s.Recommendation, decreasing = T),1:2]
SOLUTION_RecommendationSophia <- RecommendationSophiaNameRates[1:5,]
SOLUTION_RecommendationSophia
critics
View(critics)
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
boolean_Babe
boolean_Babe <- df_critics[x>4, colnames(df_critics) == "Babe"] > 0
apply(critics[,-1],2,function(x) (x>=4))
boolena_critics <- apply(critics[,-1],2,function(x) (x>=4))
boolena_critics
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
boolean_critics <- boolean_critics[,colnames(df_critics) == "Babe"]
boolean_critics <- boolean_critics[,colnames(df_critics) == "Babe"] == TRUE
boolean_critics[,"Babe"]
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
boolean_critics
boolean_critics[,"Babe"]
critics[boolean_critics[,"Babe"],]
critics[boolean_critics[,"Babe"],critics$User]
?count()
?count
critics[boolean_critics[,"Babe"],]
Babe_critics <- critics[boolean_critics[,"Babe"],]
Babe_critics
top5_percentage <- apply(critics[,-1],2,function(x) sum(x, na.rm=T))
FilmsBabe <- apply(critics[,-1],2,function(x) sum(x, na.rm=T))
FilmsBabe
FilmsBabe <- apply(critics[,-1],1,function(x) sum(x, na.rm=T))
FilmsBabe
top5_percentage <- sort(apply(critics[,-1],2,function(x) sum(x>=4, na.rm=T)/sum(x>=0, na.rm=T)),decreasing=T)[1:5]
Babe_critics
#of the users that rated Babe 4 or higher, calculate the mean ratings for other movies
babe = critics %>%
filter(Babe >= 4) %>%
summarize_all(funs(mean(., na.rm = T))) %>%
select(., -User) %>%
t(.)
#of the users that rated Babe 4 or higher, calculate the mean ratings for other movies
babe = critics
filter(Babe >= 4)
#of the users that rated Babe 4 or higher, calculate the mean ratings for other movies
Babe = critics
filter(Babe >= 4)
boolean_critics <- apply(critics[,-1],2,function(x) mean(x>=4, na.rm=T))
critics
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
boolean_critics <- apply(critics[,-1],2,function(x) mean(x>=4, na.rm=T))
boolean_critics
boolean_critics
boolean_Babe
df_critics
View(df_critics)
my_data <- read.xlsx("data/Youth Employment in LATAM.xlsx", 1)
library("ggplot2")
library("ggplot2")
library("xlsx")
library("ggplot2")
library("xlsx")
library("tidyverse")
library("ggalt")
library("xlsx")
library("tidyverse")
library("ggalt")
library("rworldmap")
my_data <- read.xlsx("data/Youth Employment in LATAM.xlsx", 1)
my_data <- read.xlsx("C:/Users/Eduardo/Downloads/data/Youth Employment in LATAM.xlsx", 1)
# calculate the unemployment rate. This will go aon the y axis
numRows <- nrow(my_data)
numRows
my_data$ur<-NA
for (row in 1:nrow(my_data)) {
rate  <- ((my_data$Unemployed / my_data$Economically.Active.Population ) * 100  )
my_data$ur = rate
}
head(my_data)
my_data[,"ur"]
#Tidy up the data: rename
colnames(my_data)[colnames(my_data)=="Country"] <- "Country.Code"
my_data
# order the data by country
my_data <- my_data[order(my_data$Country.Name),]
# functions
getAgeRelatedData <- function(my_data,ageRelatedData) {
rowIndex <- 1
# calculate the figures
#while (nrow(my_data) > 0) {
while (rowIndex < nrow(my_data)) {
#temp frame for just this country's data - the 1st 4 rows
countryData <- my_data[rowIndex:(rowIndex + 3),]
# order country data by age
countryData <- countryData[order(countryData$Age),]
#15-24 first
youngUnemployed <- countryData[1,]$Unemployed + countryData[2,]$Unemployed
youngEAP <- countryData[1,]$Economically.Active.Population + countryData[2,]$Economically.Active.Population
# above are correct
# then 25 - 64
oldUnemployed <- countryData[3,]$Unemployed + countryData[3,]$Unemployed
oldEAP <- countryData[4,]$Economically.Active.Population + countryData[4,]$Economically.Active.Population
UR.Young  <- ((youngUnemployed / youngEAP ) * 100  )
UR.Old <- ((oldUnemployed / oldEAP ) * 100  )
#add the new row to the ageRelatedData
new_row <- c(as.character(countryData[1,1]), as.character(countryData[2,2]), UR.Young, UR.Old);
ageRelatedData <- rbind(ageRelatedData, new_row);
rowIndex <- rowIndex + 4 #move to next country
print(rowIndex)
}
#take out rows 1 -19
ageRelatedData <- ageRelatedData[20:38,]
rownames(ageRelatedData) <- seq(length=nrow(ageRelatedData))
return(ageRelatedData);
}
organiseData <- function(ageRelatedData) {
ageRelatedData <- rbind(ageRelatedData, ageRelatedData)
ageRelatedData <- ageRelatedData[order(ageRelatedData$NA.),]
#add the two cols
ageRelatedData$Age<-NA
ageRelatedData$UR<-NA
#populate the cols, either 15-24 or 25-64
rownames(ageRelatedData) <- seq(length=nrow(ageRelatedData))
for (row in 1:nrow(ageRelatedData)) {
if (!row %% 2 == 0) { #odd  if((num %% 2) == 0) {
ageRelatedData[row,]$Age = "15-24"
ageRelatedData[row,]$UR = ageRelatedData[row,]$UR.Young
} else {              #even
ageRelatedData[row,]$Age = "25-65"
ageRelatedData[row,]$UR = ageRelatedData[row,]$UR.Old
}
}
#remove the useless cols
ageRelatedData = subset(ageRelatedData, select = -c(UR.Young, UR.Old) )
print(ageRelatedData)
return(ageRelatedData)
}
my_data <- read.xlsx("C:/Users/Eduardo/Downloads/data/Youth Employment in LATAM.xlsx", 1)
# calculate the unemployment rate. This will go aon the y axis
numRows <- nrow(my_data)
numRows
my_data$ur<-NA
for (row in 1:nrow(my_data)) {
rate  <- ((my_data$Unemployed / my_data$Economically.Active.Population ) * 100  )
my_data$ur = rate
}
head(my_data)
my_data[,"ur"]
#Tidy up the data: rename
colnames(my_data)[colnames(my_data)=="Country"] <- "Country.Code"
# order the data by country
my_data <- my_data[order(my_data$NA.),]
str(my_data)
# I want to remove all unnecessary columns, leaving only the ones I am interested in
keeps <- c("NA.", "Country.Code", "Demographic", "Age", "Unemployed",
"Economically.Active.Population", "ur")
my_data <- my_data[keeps]
print(my_data)
#Add 2 new cols to store what I want to store:
my_data$UR.Old<-NA
my_data$UR.Young<-NA
ageRelatedData <- data.frame(NA. = character(19), Country.Code=character(19),
UR.Young = character(19), UR.Old = character(19),
stringsAsFactors = FALSE);
ageRelatedData <- getAgeRelatedData(my_data, ageRelatedData)
ageRelatedData <- organiseData(ageRelatedData)
print(ageRelatedData)
main1_color = '#478adb'
ageRelatedData$UR_asNum <- NA
ageRelatedData$UR_asNum <- as.numeric(ageRelatedData$UR)
ageRelatedData$UR_asNum <- round(ageRelatedData$UR_asNum, digits=2)
myplot <- ggplot(ageRelatedData, aes(x = Age, y = UR_asNum, fill = Age, label=UR_asNum)) +
geom_bar(stat = "identity", colour = main1_color) +
geom_text(aes(label=UR_asNum),  vjust=-0.5, position = position_dodge(width = 1),
color="black", size=4) +
ylim(0, 40) +
ylab("Unemployment Rate %") +
facet_wrap(~NA.)
myplot <- myplot
+ theme(axis.text.y = element_text(angle = 90))
myplot <- myplot + theme(axis.text.y = element_text(angle = 90))
myplot <- myplot + ggtitle("Country Unemployment % Rate by Age Group") +
theme(plot.title = element_text(hjust = 0.5))
plot(myplot)
myplot <- ggplot(ageRelatedData, aes(x = Age, y = UR_asNum, fill = Age, label=UR_asNum)) +
geom_bar(stat = "identity", colour = main1_color) +
geom_text(aes(label=UR_asNum),  vjust=-0.5, position = position_dodge(width = 1),
color="black", size=4) +
ylim(0, 40) +
ylab("Unemployment Rate %") +
facet_wrap(~NA.)
myplot <- myplot + theme(axis.text.y = element_text(angle = 90))
myplot <- myplot + ggtitle("Country Unemployment % Rate by Age Group") +
theme(plot.title = element_text(hjust = 0.5))
plot(myplot)
## Map Plot
mapCountryData(n, nameColumnToPlot = "Difference", numCats = 6, catMethod = "quantiles", gyr, addLegend=TRUE, mapTitle="", mapRegion="latin america", oceanCol = "white", missingCountryCol="light grey", borderCol = "white")
library("RColorBrewer")
percent_ind
percent_ind <- apply(my_data[11,13:21], 2, function(x) sum(x, na.rm=TRUE)/tot_industry)
tot_industry <- as.numeric(my_data[11, 22])
percent_ind <- apply(my_data[11,13:21], 2, function(x) sum(x, na.rm=TRUE)/tot_industry)
my_data
View(my_data)
my_data <- reset
reset <- read.xlsx("C:/Users/Eduardo/Desktop/IE 2/Data Visualization/group assigment/data/Youth Employment in LATAM.xlsx", 1)
my_data <- reset
tot_industry <- as.numeric(my_data[11, 22])
percent_ind <- apply(my_data[11,13:21], 2, function(x) sum(x, na.rm=TRUE)/tot_industry)
tot_industry_1 <- as.numeric(my_data[12, 22])
percent_ind_1 <- apply(my_data[12,13:21], 2, function(x) sum(x, na.rm=TRUE)/tot_industry_1)
percent_ind_1 <- apply(my_data[12,13:21], 2, function(x) sum(x, na.rm=TRUE)/tot_industry_1)
critics
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
boolean_Babe
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4)
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
boolean_critics
boolean_critics <- apply(critics,2,function(x) (x>=4))
boolean_critics
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
boolean_critics
Babe_critics <- critics[boolean_critics[,"Babe"],]
Babe_critics
View(Babe_critics)
View(boolean_critics)
boolean_critics[,"Babe"]
na.omit(boolean_critics[,"Babe"])
Babe_critics <- critics[na.omit(boolean_critics[,"Babe"]),]
Babe_critics
View(Babe_critics)
ncol(Babe_critics)
ncol(Babe_critics)-1
Babe_critics[,1:ncol(Babe_critics)-1]
Babe_critics <- Babe_critics[,1:ncol(Babe_critics)-1]
Babe_critics
View(Babe_critics)
Babe_critics <- Babe_critics[,1:ncol(Babe_critics)-2]
Babe_critics <- Babe_critics[,1:ncol(Babe_critics)-2]
Babe_critics <- Babe_critics[,1:ncol(Babe_critics)-1]
Babe_critics <- Babe_critics[,1:ncol(Babe_critics)-1]
View(Babe_critics)
Babe_critics_length <-ncol(Babe_critics)-2
Babe_critics <- Babe_critics[,1:Babe_critics_length]
Babe_critics <- critics[na.omit(boolean_critics[,"Babe"]),]
Babe_critics <- Babe_critics[,1:Babe_critics_length]
View(Babe_critics)
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
na.omit(boolean_critics[,"Babe"])
Babe_critics_length <- ncol(Babe_critics)-2
Babe_critics <- critics[na.omit(boolean_critics[,"Babe"]),]
Babe_critics <- Babe_critics[,1:Babe_critics_length]
View(Babe_critics)
Babe_critics
critics[na.omit(boolean_critics[,"Babe"]),]
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
na.omit(boolean_critics[,"Babe"])
na.omit(boolean_critics[,"Babe"])
Babe_critics_length <- ncol(Babe_critics)-2
Babe_critics <- critics[na.omit(boolean_critics[,"Babe"]),]
View(Babe_critics)
Babe_critics <- Babe_critics[,1:Babe_critics_length]
View(Babe_critics)
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
na.omit(boolean_critics[,"Babe"])
Babe_critics <- critics[na.omit(boolean_critics[,"Babe"]),]
Babe_critics <- Babe_critics[,1:Babe_critics_length]
View(Babe_critics)
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
na.omit(boolean_critics[,"Babe"])
Babe_critics <- critics[na.omit(boolean_critics[,"Babe"]),]
Babe_critics_length <- ncol(Babe_critics)-2
Babe_critics <- Babe_critics[,1:Babe_critics_length]
View(Babe_critics)
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
na.omit(boolean_critics[,"Babe"])
Babe_critics <- critics[na.omit(boolean_critics[,"Babe"]),]
Babe_critics_length <- ncol(Babe_critics)-2
View(Babe_critics)
View(Babe_critics)
Babe_critics <- Babe_critics[,1:Babe_critics_length]
View(Babe_critics)
colMeans(Babe_critics, na.rm = T)
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
na.omit(boolean_critics[,"Babe"])
boolean_critics
Babe_critics <- critics[na.omit(boolean_critics[,"Babe"]),]
Babe_critics
View(Babe_critics)
na.omit(boolean_critics[,"Babe"])
Babe_critics <- critics[na.omit(boolean_critics[,"Babe"])==TRUE,]
View(Babe_critics)
boolean_critics_NAomit <- na.omit(boolean_critics[,"Babe"])
boolean_critics_NAomit
Babe_critics <- critics[boolean_critics_NAomit,]
View(Babe_critics)
boolean_critics_NAomit
is.na(boolean_critics[,"Babe"])
boolean_critics$Babe
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
boolean_critics
is.na(boolean_critics[,"Babe"])
boolean_critics[is.na(boolean_critics[,"Babe"])]
boolean_critics[is.na(boolean_critics[,"Babe"])] <- FALSE
boolean_critics[,"Babe"]
boolean_critics[,"Babe"]
Babe_critics <- critics[boolean_critics[,"Babe"],]
View(Babe_critics)
Babe_critics_length <- ncol(Babe_critics)-2
Babe_critics <- Babe_critics[,1:Babe_critics_length]
colMeans(Babe_critics, na.rm = T)
View(Babe_critics)
typeof((Babe_critics))
colMeans(as.numeric(Babe_critics), na.rm = T)
colMeans(as.data.frame(Babe_critics), na.rm = T)
typeof(as.data.frame(Babe_critics))
colMeans(x=as.data.frame(Babe_critics), na.rm = TRUE)
length(Babe_critics)
Babe_critics[1:20]
Babe_critics[2:20]
colMeans(x=as.data.frame(Babe_critics[2:length(Babe_critics)]), na.rm = TRUE)
sort(colMeans(x=as.data.frame(Babe_critics[2:length(Babe_critics)]), na.rm = TRUE))[1:5]
sort(colMeans(x=as.data.frame(Babe_critics[2:length(Babe_critics)]), na.rm = TRUE), decreasing = T)[1:5]
solutionExercise5 <- sort(colMeans(x=as.data.frame(Babe_critics[2:length(Babe_critics)]), na.rm = TRUE), decreasing = T)[1:5]
solutionExercise5
boolean_Babe <- df_critics[, colnames(df_critics) == "Babe"] > 0
boolean_critics <- apply(critics[,-1],2,function(x) (x>=4))
Babe_critics <- critics[boolean_critics[,"Babe"],]
Babe_critics_length <- ncol(Babe_critics)-2
Babe_critics <- Babe_critics[,1:Babe_critics_length]
solutionExercise5 <- sort(colMeans(x=as.data.frame(Babe_critics[2:length(Babe_critics)]), na.rm = TRUE), decreasing = T)[1:5]
solutionExercise5
critics <- read.csv("C:/Users/Eduardo/Desktop/IE 2/Recommendation Engines/session 2/Data/critics.csv")
critics <- read.csv("C:/Users/Eduardo/Desktop/IE 2/Recommendation Engines/session 2/Data/critics.csv")
df_critics <- as.data.frame(critics)
Sophia_critics <- t(df_critics[df_critics$User=="Sophia",])
Nuria_critics <- t(df_critics[df_critics$User=="Nuria",])
correlation_Sophia_Nuria <- cor(as.numeric(Sophia_critics[-1,]),as.numeric(Nuria_critics[-1,]),us="complete.obs")
correlation_Sophia_Nuria
Sophia_critics <- (df_critics[df_critics$User=="Sophia",])
Nuria_critics <- (df_critics[df_critics$User=="Nuria",])
correlation_Sophia_Nuria <- cor(as.numeric(Sophia_critics[-1,]),as.numeric(Nuria_critics[-1,]),us="complete.obs")
correlation_Sophia_Nuria
Sophia_critics <- t(df_critics[df_critics$User=="Sophia",])
df_critics <- as.data.frame(critics)
Sophia_critics <- t(df_critics[df_critics$User=="Sophia",])
Nuria_critics <- t(df_critics[df_critics$User=="Nuria",])
##We leave only the information of Sophia and Nuria, in two different list, to pass them as X and Y for doing the correaltion.
correlation_Sophia_Nuria <- cor(as.numeric(Sophia_critics[-1,]),as.numeric(Nuria_critics[-1,]),us="complete.obs")
correlation_Sophia_Nuria
##We use the parameter "us" of "cor" function to say "you do not have to take into account NA values"
View(Nuria_critics)
Sophia_critics <- (df_critics[df_critics$User=="Sophia",])
Nuria_critics <- (df_critics[df_critics$User=="Nuria",])
correlation_Sophia_Nuria <- cor(as.numeric(Sophia_critics[,-1]),as.numeric(Nuria_critics[,-1]),us="complete.obs")
correlation_Sophia_Nuria
df_critics <- as.data.frame(critics)
Sophia_critics <- df_critics[df_critics$User=="Sophia",]
Nuria_critics <- df_critics[df_critics$User=="Nuria",]
correlation_Sophia_Nuria <- cor(as.numeric(Sophia_critics[,-1]),as.numeric(Nuria_critics[,-1]),us="complete.obs")
correlation_Sophia_Nuria
View(Nuria_critics)
df_critics_T = setNames(data.frame(t(df_critics[,-1])), df_critics[,1])
df_critics_T
View(df_critics_T)
setNames(data.frame(t(df_critics[,-1])), df_critics[,1])
t(df_critics[,-1])
df_critics[,1]
?geom_smooth
df_critics_T <- setNames(data.frame(t(df_critics[,-1])), df_critics[,1])
typeof(df_critics_T)
plotSophiaNuria = ggplot(df_critics_T, aes(x=Sophia, y=Nuria)) +
geom_point() +
geom_smooth(method="lm", se=F) +
labs(x="Sophia Ratings", y="Nuria Ratings", title="Sophia vs. Nuria")
?geom_smooth
plotSophiaNuria
plotSophiaNuria
plotSophiaNuria = ggplot(df_critics_T, aes(x=Sophia, y=Nuria)) +
geom_point() +
geom_smooth(method="lm") +
labs(x="Sophia Ratings", y="Nuria Ratings", title="Sophia vs. Nuria")
plotSophiaNuria
plotSophiaNuria = ggplot(df_critics_T, aes(x=Sophia, y=Nuria)) +
geom_point() +
geom_smooth(method="lm", se=F) +
labs(x="Sophia Ratings", y="Nuria Ratings", title="Sophia vs. Nuria")
plotSophiaNuria
